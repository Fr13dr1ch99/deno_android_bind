diff '--color=auto' -ru -x Cargo.lock workdir-1/deno-1.36.2/build.rs workdir/deno-1.36.2/build.rs
--- workdir-1/deno-1.36.2/build.rs	2023-08-24 14:19:31.560576969 +0800
+++ workdir/deno-1.36.2/build.rs	2023-08-24 14:31:30.512030412 +0800
@@ -340,7 +340,6 @@
       deno_broadcast_channel::InMemoryBroadcastChannel::default(),
       false, // No --unstable.
     ),
-    deno_ffi::deno_ffi::init_ops::<PermissionsContainer>(false),
     deno_net::deno_net::init_ops::<PermissionsContainer>(
       None, false, // No --unstable.
       None,
@@ -400,12 +399,9 @@
   // Host snapshots won't work when cross compiling.
   let target = env::var("TARGET").unwrap();
   let host = env::var("HOST").unwrap();
-  if target != host {
-    panic!("Cross compiling with snapshot is not supported.");
-  }
 
   let symbols_path = std::path::Path::new("napi").join(
-    format!("generated_symbol_exports_list_{}.def", env::consts::OS).as_str(),
+    format!("generated_symbol_exports_list_{}.def", "linux").as_str(),
   )
   .canonicalize()
   .expect(
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno-1.36.2/Cargo.toml workdir/deno-1.36.2/Cargo.toml
--- workdir-1/deno-1.36.2/Cargo.toml	2023-08-24 14:19:31.507574549 +0800
+++ workdir/deno-1.36.2/Cargo.toml	2023-08-24 14:31:30.513030457 +0800
@@ -385,3 +385,10 @@
 
 [target."cfg(windows)".build-dependencies.winres]
 version = "=0.1.12"
+
+[patch.crates-io]
+v8 = { path = "../v8-0.75.1" }
+deno_runtime = { path = "../deno_runtime-0.124.0" }
+deno_fs = { path = "../deno_fs-0.26.0" }
+deno_node = { path = "../deno_node-0.53.0" }
+libsqlite3-sys = { path= "../libsqlite3-sys-0.26.0" }
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_fs-0.26.0/std_fs.rs workdir/deno_fs-0.26.0/std_fs.rs
--- workdir-1/deno_fs-0.26.0/std_fs.rs	2023-08-24 14:24:19.582529588 +0800
+++ workdir/deno_fs-0.26.0/std_fs.rs	2023-08-24 14:31:30.513030457 +0800
@@ -62,7 +62,7 @@
       let _ = umask(prev);
       prev
     };
-    #[cfg(target_os = "linux")]
+    #[cfg(any(target_os = "linux", target_os = "android"))]
     {
       Ok(r.bits())
     }
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_node-0.53.0/ops/os.rs workdir/deno_node-0.53.0/ops/os.rs
--- workdir-1/deno_node-0.53.0/ops/os.rs	2023-08-24 14:25:46.319442760 +0800
+++ workdir/deno_node-0.53.0/ops/os.rs	2023-08-24 14:31:30.514030503 +0800
@@ -60,7 +60,7 @@
   use libc::id_t;
   use libc::PRIO_PROCESS;
 
-  #[cfg(target_os = "macos")]
+  #[cfg(any(target_os = "macos", target_os = "android"))]
   #[allow(non_camel_case_types)]
   type priority_t = i32;
   #[cfg(target_os = "linux")]
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_node-0.53.0/polyfills/internal_binding/uv.ts workdir/deno_node-0.53.0/polyfills/internal_binding/uv.ts
--- workdir-1/deno_node-0.53.0/polyfills/internal_binding/uv.ts	2023-08-24 14:25:46.344443889 +0800
+++ workdir/deno_node-0.53.0/polyfills/internal_binding/uv.ts	2023-08-24 14:31:30.515030548 +0800
@@ -494,6 +494,8 @@
     ? codeToErrorDarwin
     : osType === "linux"
     ? codeToErrorLinux
+    : osType === "android"
+    ? codeToErrorLinux
     : osType === "freebsd"
     ? codeToErrorFreebsd
     : osType === "openbsd"
@@ -508,6 +510,8 @@
     ? errorToCodeDarwin
     : osType === "linux"
     ? errorToCodeLinux
+    : osType === "android"
+    ? errorToCodeLinux
     : osType === "freebsd"
     ? errorToCodeFreebsd
     : osType === "openbsd"
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_node-0.53.0/polyfills/_util/os.ts workdir/deno_node-0.53.0/polyfills/_util/os.ts
--- workdir-1/deno_node-0.53.0/polyfills/_util/os.ts	2023-08-24 14:25:46.333443392 +0800
+++ workdir/deno_node-0.53.0/polyfills/_util/os.ts	2023-08-24 14:31:30.516030594 +0800
@@ -2,7 +2,7 @@
 
 const { ops } = globalThis.__bootstrap.core;
 
-export type OSType = "windows" | "linux" | "darwin" | "freebsd" | "openbsd";
+export type OSType = "windows" | "linux" | "android" | "darwin" | "freebsd" | "openbsd";
 
 export const osType: OSType = ops.op_node_build_os();
 
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/build.rs workdir/deno_runtime-0.124.0/build.rs
--- workdir-1/deno_runtime-0.124.0/build.rs	2023-08-24 14:26:48.769264622 +0800
+++ workdir/deno_runtime-0.124.0/build.rs	2023-08-24 14:31:30.516030594 +0800
@@ -107,15 +107,6 @@
     }
   }
 
-  impl deno_ffi::FfiPermissions for Permissions {
-    fn check_partial(
-      &mut self,
-      _path: Option<&Path>,
-    ) -> Result<(), deno_core::error::AnyError> {
-      unreachable!("snapshotting!")
-    }
-  }
-
   impl deno_napi::NapiPermissions for Permissions {
     fn check(
       &mut self,
@@ -257,7 +248,6 @@
       deno_broadcast_channel,
       // FIXME(bartlomieju): this should be reenabled
       // "deno_node",
-      deno_ffi,
       deno_net,
       deno_napi,
       deno_http,
@@ -333,7 +323,6 @@
         deno_broadcast_channel::InMemoryBroadcastChannel::default(),
         false, // No --unstable.
       ),
-      deno_ffi::deno_ffi::init_ops_and_esm::<Permissions>(false),
       deno_net::deno_net::init_ops_and_esm::<Permissions>(
         None, false, // No --unstable.
         None,
Only in workdir/deno_runtime-0.124.0: Cargo.toml.rej
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/js/10_permissions.js workdir/deno_runtime-0.124.0/js/10_permissions.js
--- workdir-1/deno_runtime-0.124.0/js/10_permissions.js	2023-08-24 14:26:48.770264667 +0800
+++ workdir/deno_runtime-0.124.0/js/10_permissions.js	2023-08-24 14:32:04.423569959 +0800
@@ -33,7 +33,7 @@
  * @property {boolean} partial
  */
 
-/** @type {ReadonlyArray<"read" | "write" | "net" | "env" | "sys" | "run" | "ffi" | "hrtime">} */
+/** @type {ReadonlyArray<"read" | "write" | "net" | "env" | "sys" | "run" | "hrtime">} */
 const permissionNames = [
   "read",
   "write",
@@ -41,7 +41,6 @@
   "env",
   "sys",
   "run",
-  "ffi",
   "hrtime",
 ];
 
@@ -129,7 +128,7 @@
 function cache(desc, rawStatus) {
   let { name: key } = desc;
   if (
-    (desc.name === "read" || desc.name === "write" || desc.name === "ffi") &&
+    (desc.name === "read" || desc.name === "write") &&
     ReflectHas(desc, "path")
   ) {
     key += `-${desc.path}&`;
@@ -180,7 +179,7 @@
  */
 function formDescriptor(desc) {
   if (
-    desc.name === "read" || desc.name === "write" || desc.name === "ffi"
+    desc.name === "read" || desc.name === "write"
   ) {
     desc.path = pathFromURL(desc.path);
   } else if (desc.name === "run") {
@@ -266,7 +265,7 @@
   if (typeof permissions == "object" && permissions != null) {
     const serializedPermissions = {};
     for (
-      const key of new SafeArrayIterator(["read", "write", "run", "ffi"])
+      const key of new SafeArrayIterator(["read", "write", "run"])
     ) {
       if (ArrayIsArray(permissions[key])) {
         serializedPermissions[key] = ArrayPrototypeMap(
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/js/90_deno_ns.js workdir/deno_runtime-0.124.0/js/90_deno_ns.js
--- workdir-1/deno_runtime-0.124.0/js/90_deno_ns.js	2023-08-24 14:26:48.771264713 +0800
+++ workdir/deno_runtime-0.124.0/js/90_deno_ns.js	2023-08-24 14:32:04.426570095 +0800
@@ -5,7 +5,6 @@
 import * as timers from "ext:deno_web/02_timers.js";
 import * as httpClient from "ext:deno_fetch/22_http_client.js";
 import * as console from "ext:deno_console/01_console.js";
-import * as ffi from "ext:deno_ffi/00_ffi.js";
 import * as net from "ext:deno_net/01_net.js";
 import * as tls from "ext:deno_net/02_tls.js";
 import * as http from "ext:deno_http/01_http.js";
@@ -163,11 +162,6 @@
   createHttpClient: httpClient.createHttpClient,
   // TODO(bartlomieju): why is it needed?
   http,
-  dlopen: ffi.dlopen,
-  UnsafeCallback: ffi.UnsafeCallback,
-  UnsafePointer: ffi.UnsafePointer,
-  UnsafePointerView: ffi.UnsafePointerView,
-  UnsafeFnPointer: ffi.UnsafeFnPointer,
   flock: fs.flock,
   flockSync: fs.flockSync,
   funlock: fs.funlock,
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/lib.rs workdir/deno_runtime-0.124.0/lib.rs
--- workdir-1/deno_runtime-0.124.0/lib.rs	2023-08-24 14:26:48.771264713 +0800
+++ workdir/deno_runtime-0.124.0/lib.rs	2023-08-24 14:32:04.428570186 +0800
@@ -6,7 +6,6 @@
 pub use deno_core;
 pub use deno_crypto;
 pub use deno_fetch;
-pub use deno_ffi;
 pub use deno_fs;
 pub use deno_http;
 pub use deno_io;
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/ops/os/mod.rs workdir/deno_runtime-0.124.0/ops/os/mod.rs
--- workdir-1/deno_runtime-0.124.0/ops/os/mod.rs	2023-08-24 14:26:48.771264713 +0800
+++ workdir/deno_runtime-0.124.0/ops/os/mod.rs	2023-08-24 14:32:04.430570277 +0800
@@ -305,7 +305,7 @@
   }
 }
 
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "android"))]
 fn rss() -> usize {
   // Inspired by https://github.com/Arc-blroth/memory-stats/blob/5364d0d09143de2a470d33161b2330914228fde9/src/linux.rs
 
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/ops/os/sys_info.rs workdir/deno_runtime-0.124.0/ops/os/sys_info.rs
--- workdir-1/deno_runtime-0.124.0/ops/os/sys_info.rs	2023-08-24 14:26:48.771264713 +0800
+++ workdir/deno_runtime-0.124.0/ops/os/sys_info.rs	2023-08-24 14:32:04.433570413 +0800
@@ -6,7 +6,7 @@
 const DEFAULT_LOADAVG: LoadAvg = (0.0, 0.0, 0.0);
 
 pub fn loadavg() -> LoadAvg {
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "linux", target_os = "android"))]
   {
     use libc::SI_LOAD_SHIFT;
 
@@ -117,6 +117,10 @@
       )
     }
   }
+  #[cfg(target_os = "android")]
+  {
+    String::from("")
+  }
 }
 
 #[cfg(target_family = "windows")]
@@ -198,7 +202,7 @@
     swap_total: 0,
     swap_free: 0,
   };
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "linux", target_os = "android"))]
   {
     let mut info = std::mem::MaybeUninit::uninit();
     // SAFETY: `info` is a valid pointer to a `libc::sysinfo` struct.
@@ -331,7 +335,7 @@
 pub fn os_uptime() -> u64 {
   let uptime: u64;
 
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "linux", target_os = "android"))]
   {
     let mut info = std::mem::MaybeUninit::uninit();
     // SAFETY: `info` is a valid pointer to a `libc::sysinfo` struct.
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/permissions/mod.rs workdir/deno_runtime-0.124.0/permissions/mod.rs
--- workdir-1/deno_runtime-0.124.0/permissions/mod.rs	2023-08-24 14:26:48.772264758 +0800
+++ workdir/deno_runtime-0.124.0/permissions/mod.rs	2023-08-24 14:32:04.437570595 +0800
@@ -1464,13 +1464,6 @@
   }
 }
 
-impl deno_ffi::FfiPermissions for PermissionsContainer {
-  #[inline(always)]
-  fn check_partial(&mut self, path: Option<&Path>) -> Result<(), AnyError> {
-    self.0.lock().ffi.check_partial(path)
-  }
-}
-
 impl deno_kv::sqlite::SqliteDbHandlerPermissions for PermissionsContainer {
   #[inline(always)]
   fn check_read(&mut self, p: &Path, api_name: &str) -> Result<(), AnyError> {
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/web_worker.rs workdir/deno_runtime-0.124.0/web_worker.rs
--- workdir-1/deno_runtime-0.124.0/web_worker.rs	2023-08-24 14:26:48.772264758 +0800
+++ workdir/deno_runtime-0.124.0/web_worker.rs	2023-08-24 14:32:04.440570731 +0800
@@ -431,7 +431,6 @@
         options.broadcast_channel.clone(),
         unstable,
       ),
-      deno_ffi::deno_ffi::init_ops_and_esm::<PermissionsContainer>(unstable),
       deno_net::deno_net::init_ops_and_esm::<PermissionsContainer>(
         options.root_cert_store_provider.clone(),
         unstable,
Only in workdir/deno_runtime-0.124.0: web_worker.rs.orig
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno_runtime-0.124.0/worker.rs workdir/deno_runtime-0.124.0/worker.rs
--- workdir-1/deno_runtime-0.124.0/worker.rs	2023-08-24 14:26:48.773264803 +0800
+++ workdir/deno_runtime-0.124.0/worker.rs	2023-08-24 14:32:04.442570822 +0800
@@ -326,7 +326,6 @@
         options.broadcast_channel.clone(),
         unstable,
       ),
-      deno_ffi::deno_ffi::init_ops_and_esm::<PermissionsContainer>(unstable),
       deno_net::deno_net::init_ops_and_esm::<PermissionsContainer>(
         options.root_cert_store_provider.clone(),
         unstable,
Only in workdir/deno_runtime-0.124.0: worker.rs.orig
diff '--color=auto' -ru -x Cargo.lock workdir-1/libsqlite3-sys-0.26.0/build.rs workdir/libsqlite3-sys-0.26.0/build.rs
--- workdir-1/libsqlite3-sys-0.26.0/build.rs	2023-08-24 14:28:18.776337240 +0800
+++ workdir/libsqlite3-sys-0.26.0/build.rs	2023-08-24 14:32:04.443570867 +0800
@@ -201,6 +201,13 @@
         // https://android.googlesource.com/platform/external/sqlite/+/2c8c9ae3b7e6f340a19a0001c2a889a211c9d8b2/dist/Android.mk
         if super::android_target() {
             cfg.flag("-DSQLITE_TEMP_STORE=3");
+
+            let target = env::var("TARGET").unwrap();
+            if target == "x86_64-linux-android" {
+                let ndk_home = env::var("ANDROID_NDK_HOME").unwrap();
+                println!("cargo:rustc-link-lib=static=clang_rt.builtins-x86_64-android");
+                println!("cargo:rustc-link-search={}/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.7/lib/linux", ndk_home);
+            }
         }
 
         if cfg!(feature = "with-asan") {
diff '--color=auto' -ru -x Cargo.lock workdir-1/v8-0.75.1/build.rs workdir/v8-0.75.1/build.rs
--- workdir-1/v8-0.75.1/build.rs	2023-08-24 14:28:52.564867597 +0800
+++ workdir/v8-0.75.1/build.rs	2023-08-24 14:32:04.445570958 +0800
@@ -145,7 +145,7 @@
     let clang_base_path = clang_download();
     gn_args.push(format!("clang_base_path={:?}", clang_base_path));
 
-    if cfg!(target_os = "android") && cfg!(target_arch = "aarch64") {
+    if cfg!(target_os = "android") {
       gn_args.push("treat_warnings_as_errors=false".to_string());
     }
   }
@@ -180,9 +180,19 @@
       maybe_install_sysroot("arm64");
       maybe_install_sysroot("amd64");
     };
+    if target_triple == "x86_64-linux-android" {
+      gn_args.push(r#"target_cpu="x64""#.to_string());
+      gn_args.push("use_sysroot=true".to_string());
+      maybe_install_sysroot("amd64");
+    }
 
-    if target_triple == "aarch64-linux-android" {
-      gn_args.push(r#"v8_target_cpu="arm64""#.to_string());
+    if target_triple.contains("android") {
+      if target_triple == "aarch64-linux-android" {
+        gn_args.push(r#"v8_target_cpu="arm64""#.to_string());
+      }
+      if target_triple == "x86_64-linux-android" {
+        gn_args.push(r#"v8_target_cpu="x64""#.to_string());
+      }
       gn_args.push(r#"target_os="android""#.to_string());
 
       gn_args.push("treat_warnings_as_errors=false".to_string());
diff '--color=auto' -ru -x Cargo.lock workdir-1/deno-1.36.2/napi/util.rs workdir-1/deno-1.36.2/napi/util.rs
--- workdir-1/deno-1.36.2/napi/util.rs	2024-03-22 16:22:12.794349893 +0100
+++ workdir-1/deno-1.36.2/napi/util.rs	2024-03-22 16:22:50.624544062 +0100
@@ -1,23 +1,8 @@
-// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-
+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
 use deno_runtime::deno_napi::*;
-use std::cell::Cell;
-
-unsafe fn get_backing_store_slice(
-  backing_store: &mut v8::SharedRef<v8::BackingStore>,
-  byte_offset: usize,
-  byte_length: usize,
-) -> &mut [u8] {
-  let cells: *const [Cell<u8>] =
-    &backing_store[byte_offset..byte_offset + byte_length];
-  let mut bytes = cells as *mut [u8];
-  &mut *bytes
-}
 
 pub fn get_array_buffer_ptr(ab: v8::Local<v8::ArrayBuffer>) -> *mut u8 {
-  let mut backing_store = ab.get_backing_store();
-  let byte_length = ab.byte_length();
-  let mut slice =
-    unsafe { get_backing_store_slice(&mut backing_store, 0, byte_length) };
-  slice.as_mut_ptr()
-}
+  // SAFETY: Thanks to the null pointer optimization, NonNull<T> and Option<NonNull<T>> are guaranteed
+  // to have the same size and alignment.
+  unsafe { std::mem::transmute(ab.data()) }
+}